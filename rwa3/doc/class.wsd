@startuml
namespace rpg #DDDDDD {
class Player{
    -name: str = "arthur"
    -health: int = 1000
    -inventory: dict
    -position: list
    -direction: str
    -attack_power: int = 50
    +take_damage(damage:int): None
    +attack(enemy:Enemy): None
    +defend(): None
}
abstract class Enemy{
    -position: list
    -name: str 
    -health: int 
    -attack_power: int = 20
    +attack(player:Player, damage: int): None
    +take_damage(damage: int): None
    +extract_enemy(cls:Enemy, position: list)
}
class Dragon{
    -position: list
    -name: str 
    -health: int = 100
    -fire_power: int
    +attack(player:Player, damage: int): None
    +take_damage(damage: int): None
    +extract_enemy(cls:Enemy, position: list)
}
class Skeleton{
    -position: list
    -name: str 
    -health: int = 100
    -shield_power: int
    +attack(player:Player, damage: int): None
    +take_damage(damage: int): None
    +extract_enemy(cls:Enemy, position: list)
}
class Item{
    -type: enum
    -position: list
    -value: int 
}
class Heart{
    -type: HEART
    -position: list
    -value: int = 100
}
class Arrow{
    -type: ARROW
    -position: list
    -value: int = 150
}
class Key{
    -type: KEY
    -position: list
    -value: None
}
class Padlock{
    -type: PADLOCK
    -position: list
    -value: None
}
class Gem{
    -type: GEM
    -position: list
    -value: None
}
class Maze{
    -grid: arr
    -obstacle_positions: list
    -skeleton_positions: list
    -dragon_positions: list
    -gem_positions: list
    -key_positions: list
    -arrow_positions: list
    -heart_positions: list
    -padlock_positions: list
    -cls_empty: str = "  "
    -skeleton_emoji: str = "💀"
    -dragon_emoji: str = "🐉"
    -gem_emoji: str = "💎"
    -key_emoji: str = "🔑"
    -arrow_emoji: str = "🏹"
    -heart_emoji: str = "💖"
    -padlock_emoji: str = "🔒"
    +remove_dragon_position(position: list)
    +remove_skeleton_position(position: list)
    +remove_gem_position(position: list)
    +remove_key_position(position: list)
    +remove_arrow_position(position: list)
    +remove_heart_position(position: list)
    +remove_padlock_position(position: list)
    +extract_grid_size()
    +extract_player()
    +extract_obstacles()
    +extract_items()
    +extract_enemies()
    +spawn_player()
    +spawn_obstacles()
    +space_gems()
    +space_enemies()
    +spawn_padlocks()
    +spawn_keys()
    +spawn_arrows()
    +spawn_hearts()
    +spawn_components()
    +print_maze()
}
Maze *-- Enemy
Maze *-- Item
Maze *-- Player
Enemy *-- Dragon
Enemy *-- Skeleton
Item *-- Heart
Item *-- Key
Item *-- Arrow
Item *-- Padlock
Item *-- Gem

Player - Heart: takes_health >
Player - Enemy: attacks >
Player - Enemy: defends >
Enemy - Player: attacks >
Player - Arrow: uses_damage >
Player - Key: uses_unlock >
}
@enduml
